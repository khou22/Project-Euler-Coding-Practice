//: Playground - noun: a place where people can play
/*
 Solve Project Euler problems using Swift
 Project Euler: https://projecteuler.net/archives
*/

import UIKit

/*
 https://projecteuler.net/problem=1
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 
*/

var fibonacciSequence:[Int] = [1, 2, 3]
let maxFibonacciSum = 4000000
var currentSum:Int = 0
var underLimit:Bool = true

while underLimit {
    var firstNum = fibonacciSequence[fibonacciSequence.count - 1]
    var secondNum = fibonacciSequence[fibonacciSequence.count - 2]
    currentSum = firstNum + secondNum
    if (currentSum < maxFibonacciSum) {
        fibonacciSequence.append(currentSum)
    } else {
        underLimit = false
    }
}

// Find sum of even-valued terms
var total = 0
for (index, element) in fibonacciSequence.enumerate() {
    if (element % 2) == 0 {
        // If an even number
        total += element
    }
}
print("Even terms under 4 million total:", total)


/*
 https://projecteuler.net/problem=2
 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 
 Find the sum of all the multiples of 3 or 5 below 1000.
*/

var validNumbers:[Int] = []

for index in 1...999 {
    if (index % 3) == 0 {
        validNumbers.append(index)
//        print(index, "is divisible by 3")
    } else if (index % 5) == 0 {
        validNumbers.append(index)
//        print(index, "is divisible by 5")
    } else {
//        print(index, "is not a valid number")
    }
}

var sum:Int = 0;
//print(validNumbers.count)
for index in 0...(validNumbers.count - 1) {
//    print(validNumbers[index])
//    print(index)
    sum += validNumbers[index]
}
//print(sum)
